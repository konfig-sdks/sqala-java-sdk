/*
 * Developer API
 * At Sqala, we believe that everyone deserves access to financial services, and we are committed to providing secure and reliable payment solutions to clients who may have been overlooked by traditional financial institutions.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.QrCodeGenerateQrCodeRequestMetadataInner;
import com.konfigthis.client.model.RecipientCreateBankAccountRequest;
import com.konfigthis.client.model.RecipientCreateBankAccountResponse;
import com.konfigthis.client.model.RecipientCreateRecipientRequest;
import com.konfigthis.client.model.RecipientCreateWithdrawalRequest;
import com.konfigthis.client.model.RecipientCreateWithdrawalRequestBankAccount;
import com.konfigthis.client.model.RecipientCreateWithdrawalResponse;
import com.konfigthis.client.model.RecipientDeleteBankAccountResponse;
import com.konfigthis.client.model.RecipientGetBankAccountResponse;
import com.konfigthis.client.model.RecipientGetWithdrawalByIdResponse;
import com.konfigthis.client.model.RecipientListAllResponse;
import com.konfigthis.client.model.RecipientListBankAccountsResponse;
import com.konfigthis.client.model.RecipientListWithdrawalsResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RecipientApi
 */
@Disabled
public class RecipientApiTest {

    private static RecipientApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new RecipientApi(apiClient);
    }

    /**
     * Create a Bank Account
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createBankAccountTest() throws ApiException {
        String holderName = null;
        String holderTaxId = null;
        String holderType = null;
        String branchNumber = null;
        String accountNumber = null;
        String bankId = null;
        String recipientId = null;
        String type = null;
        RecipientCreateBankAccountResponse response = api.createBankAccount(holderName, holderTaxId, holderType, branchNumber, accountNumber, bankId, recipientId)
                .type(type)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a Recipient
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRecipientTest() throws ApiException {
        String name = null;
        String taxId = null;
        String type = null;
        String code = null;
        List<QrCodeGenerateQrCodeRequestMetadataInner> metadata = null;
        String response = api.createRecipient(name, taxId, type)
                .code(code)
                .metadata(metadata)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a Withdrawal
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWithdrawalTest() throws ApiException {
        Integer amount = null;
        String method = null;
        String recipientId = null;
        String code = null;
        String pixKey = null;
        RecipientCreateWithdrawalRequestBankAccount bankAccount = null;
        String bankAccountId = null;
        List<QrCodeGenerateQrCodeRequestMetadataInner> metadata = null;
        RecipientCreateWithdrawalResponse response = api.createWithdrawal(amount, method, recipientId)
                .code(code)
                .pixKey(pixKey)
                .bankAccount(bankAccount)
                .bankAccountId(bankAccountId)
                .metadata(metadata)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a Bank Account
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteBankAccountTest() throws ApiException {
        String recipientId = null;
        String bankAccountId = null;
        RecipientDeleteBankAccountResponse response = api.deleteBankAccount(recipientId, bankAccountId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Balance
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBalanceTest() throws ApiException {
        String recipientId = null;
        Object response = api.getBalance(recipientId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a Bank Account
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBankAccountTest() throws ApiException {
        String recipientId = null;
        String bankAccountId = null;
        RecipientGetBankAccountResponse response = api.getBankAccount(recipientId, bankAccountId)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a Recipient
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByIdTest() throws ApiException {
        String id = null;
        String response = api.getById(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Retrieve a Withdrawal
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWithdrawalByIdTest() throws ApiException {
        String recipientId = null;
        String withdrawalId = null;
        RecipientGetWithdrawalByIdResponse response = api.getWithdrawalById(recipientId, withdrawalId)
                .execute();
        // TODO: test validations
    }

    /**
     * List all Recipients
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAllTest() throws ApiException {
        Integer limit = null;
        String before = null;
        String after = null;
        RecipientListAllResponse response = api.listAll()
                .limit(limit)
                .before(before)
                .after(after)
                .execute();
        // TODO: test validations
    }

    /**
     * List all Bank Accounts
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listBankAccountsTest() throws ApiException {
        String recipientId = null;
        RecipientListBankAccountsResponse response = api.listBankAccounts(recipientId)
                .execute();
        // TODO: test validations
    }

    /**
     * List all Transactions
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTransactionsTest() throws ApiException {
        String recipientId = null;
        String limit = null;
        String before = null;
        String after = null;
        Object response = api.listTransactions(recipientId)
                .limit(limit)
                .before(before)
                .after(after)
                .execute();
        // TODO: test validations
    }

    /**
     * List all Withdrawals
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listWithdrawalsTest() throws ApiException {
        String recipientId = null;
        String limit = null;
        String before = null;
        String after = null;
        RecipientListWithdrawalsResponse response = api.listWithdrawals(recipientId)
                .limit(limit)
                .before(before)
                .after(after)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a Recipient
     *
     * 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRecipientByIdTest() throws ApiException {
        String id = null;
        String response = api.updateRecipientById(id)
                .execute();
        // TODO: test validations
    }

}
