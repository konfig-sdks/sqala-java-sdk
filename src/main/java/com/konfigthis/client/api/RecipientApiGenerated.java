/*
 * Developer API
 * At Sqala, we believe that everyone deserves access to financial services, and we are committed to providing secure and reliable payment solutions to clients who may have been overlooked by traditional financial institutions.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.QrCodeGenerateQrCodeRequestMetadataInner;
import com.konfigthis.client.model.RecipientCreateBankAccountRequest;
import com.konfigthis.client.model.RecipientCreateBankAccountResponse;
import com.konfigthis.client.model.RecipientCreateRecipientRequest;
import com.konfigthis.client.model.RecipientCreateWithdrawalRequest;
import com.konfigthis.client.model.RecipientCreateWithdrawalRequestBankAccount;
import com.konfigthis.client.model.RecipientCreateWithdrawalResponse;
import com.konfigthis.client.model.RecipientDeleteBankAccountResponse;
import com.konfigthis.client.model.RecipientGetBankAccountResponse;
import com.konfigthis.client.model.RecipientGetWithdrawalByIdResponse;
import com.konfigthis.client.model.RecipientListAllResponse;
import com.konfigthis.client.model.RecipientListBankAccountsResponse;
import com.konfigthis.client.model.RecipientListWithdrawalsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class RecipientApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RecipientApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public RecipientApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createBankAccountCall(String recipientId, RecipientCreateBankAccountRequest recipientCreateBankAccountRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = recipientCreateBankAccountRequest;

        // create path and map variables
        String localVarPath = "/recipients/{recipientId}/bank-accounts"
            .replace("{" + "recipientId" + "}", localVarApiClient.escapeString(recipientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createBankAccountValidateBeforeCall(String recipientId, RecipientCreateBankAccountRequest recipientCreateBankAccountRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'recipientId' is set
        if (recipientId == null) {
            throw new ApiException("Missing the required parameter 'recipientId' when calling createBankAccount(Async)");
        }

        return createBankAccountCall(recipientId, recipientCreateBankAccountRequest, _callback);

    }


    private ApiResponse<RecipientCreateBankAccountResponse> createBankAccountWithHttpInfo(String recipientId, RecipientCreateBankAccountRequest recipientCreateBankAccountRequest) throws ApiException {
        okhttp3.Call localVarCall = createBankAccountValidateBeforeCall(recipientId, recipientCreateBankAccountRequest, null);
        Type localVarReturnType = new TypeToken<RecipientCreateBankAccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createBankAccountAsync(String recipientId, RecipientCreateBankAccountRequest recipientCreateBankAccountRequest, final ApiCallback<RecipientCreateBankAccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createBankAccountValidateBeforeCall(recipientId, recipientCreateBankAccountRequest, _callback);
        Type localVarReturnType = new TypeToken<RecipientCreateBankAccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateBankAccountRequestBuilder {
        private final String holderName;
        private final String holderTaxId;
        private final String holderType;
        private final String branchNumber;
        private final String accountNumber;
        private final String bankId;
        private final String recipientId;
        private String type;

        private CreateBankAccountRequestBuilder(String holderName, String holderTaxId, String holderType, String branchNumber, String accountNumber, String bankId, String recipientId) {
            this.holderName = holderName;
            this.holderTaxId = holderTaxId;
            this.holderType = holderType;
            this.branchNumber = branchNumber;
            this.accountNumber = accountNumber;
            this.bankId = bankId;
            this.recipientId = recipientId;
        }

        /**
         * Set type
         * @param type The type of bank account. Can be CHEKING or SAVINGS. (optional, default to CHECKING)
         * @return CreateBankAccountRequestBuilder
         */
        public CreateBankAccountRequestBuilder type(String type) {
            this.type = type;
            return this;
        }
        
        /**
         * Build call for createBankAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RecipientCreateBankAccountRequest recipientCreateBankAccountRequest = buildBodyParams();
            return createBankAccountCall(recipientId, recipientCreateBankAccountRequest, _callback);
        }

        private RecipientCreateBankAccountRequest buildBodyParams() {
            RecipientCreateBankAccountRequest recipientCreateBankAccountRequest = new RecipientCreateBankAccountRequest();
            if (this.type != null)
            recipientCreateBankAccountRequest.type(RecipientCreateBankAccountRequest.TypeEnum.fromValue(this.type));
            recipientCreateBankAccountRequest.holderName(this.holderName);
            recipientCreateBankAccountRequest.holderTaxId(this.holderTaxId);
            if (this.holderType != null)
            recipientCreateBankAccountRequest.holderType(RecipientCreateBankAccountRequest.HolderTypeEnum.fromValue(this.holderType));
            recipientCreateBankAccountRequest.branchNumber(this.branchNumber);
            recipientCreateBankAccountRequest.accountNumber(this.accountNumber);
            recipientCreateBankAccountRequest.bankId(this.bankId);
            return recipientCreateBankAccountRequest;
        }

        /**
         * Execute createBankAccount request
         * @return RecipientCreateBankAccountResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public RecipientCreateBankAccountResponse execute() throws ApiException {
            RecipientCreateBankAccountRequest recipientCreateBankAccountRequest = buildBodyParams();
            ApiResponse<RecipientCreateBankAccountResponse> localVarResp = createBankAccountWithHttpInfo(recipientId, recipientCreateBankAccountRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createBankAccount request with HTTP info returned
         * @return ApiResponse&lt;RecipientCreateBankAccountResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RecipientCreateBankAccountResponse> executeWithHttpInfo() throws ApiException {
            RecipientCreateBankAccountRequest recipientCreateBankAccountRequest = buildBodyParams();
            return createBankAccountWithHttpInfo(recipientId, recipientCreateBankAccountRequest);
        }

        /**
         * Execute createBankAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RecipientCreateBankAccountResponse> _callback) throws ApiException {
            RecipientCreateBankAccountRequest recipientCreateBankAccountRequest = buildBodyParams();
            return createBankAccountAsync(recipientId, recipientCreateBankAccountRequest, _callback);
        }
    }

    /**
     * Create a Bank Account
     * 
     * @param recipientId  (required)
     * @return CreateBankAccountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public CreateBankAccountRequestBuilder createBankAccount(String holderName, String holderTaxId, String holderType, String branchNumber, String accountNumber, String bankId, String recipientId) throws IllegalArgumentException {
        if (holderName == null) throw new IllegalArgumentException("\"holderName\" is required but got null");
            

        if (holderTaxId == null) throw new IllegalArgumentException("\"holderTaxId\" is required but got null");
            

        if (holderType == null) throw new IllegalArgumentException("\"holderType\" is required but got null");
            

        if (branchNumber == null) throw new IllegalArgumentException("\"branchNumber\" is required but got null");
            

        if (accountNumber == null) throw new IllegalArgumentException("\"accountNumber\" is required but got null");
            

        if (bankId == null) throw new IllegalArgumentException("\"bankId\" is required but got null");
            

        if (recipientId == null) throw new IllegalArgumentException("\"recipientId\" is required but got null");
            

        return new CreateBankAccountRequestBuilder(holderName, holderTaxId, holderType, branchNumber, accountNumber, bankId, recipientId);
    }
    private okhttp3.Call createRecipientCall(RecipientCreateRecipientRequest recipientCreateRecipientRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = recipientCreateRecipientRequest;

        // create path and map variables
        String localVarPath = "/recipients";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRecipientValidateBeforeCall(RecipientCreateRecipientRequest recipientCreateRecipientRequest, final ApiCallback _callback) throws ApiException {
        return createRecipientCall(recipientCreateRecipientRequest, _callback);

    }


    private ApiResponse<String> createRecipientWithHttpInfo(RecipientCreateRecipientRequest recipientCreateRecipientRequest) throws ApiException {
        okhttp3.Call localVarCall = createRecipientValidateBeforeCall(recipientCreateRecipientRequest, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createRecipientAsync(RecipientCreateRecipientRequest recipientCreateRecipientRequest, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRecipientValidateBeforeCall(recipientCreateRecipientRequest, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateRecipientRequestBuilder {
        private final String name;
        private final String taxId;
        private final String type;
        private String code;
        private List<QrCodeGenerateQrCodeRequestMetadataInner> metadata;

        private CreateRecipientRequestBuilder(String name, String taxId, String type) {
            this.name = name;
            this.taxId = taxId;
            this.type = type;
        }

        /**
         * Set code
         * @param code Unique identifier for the object in your system. (optional)
         * @return CreateRecipientRequestBuilder
         */
        public CreateRecipientRequestBuilder code(String code) {
            this.code = code;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. (optional)
         * @return CreateRecipientRequestBuilder
         */
        public CreateRecipientRequestBuilder metadata(List<QrCodeGenerateQrCodeRequestMetadataInner> metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Build call for createRecipient
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RecipientCreateRecipientRequest recipientCreateRecipientRequest = buildBodyParams();
            return createRecipientCall(recipientCreateRecipientRequest, _callback);
        }

        private RecipientCreateRecipientRequest buildBodyParams() {
            RecipientCreateRecipientRequest recipientCreateRecipientRequest = new RecipientCreateRecipientRequest();
            recipientCreateRecipientRequest.code(this.code);
            recipientCreateRecipientRequest.name(this.name);
            recipientCreateRecipientRequest.taxId(this.taxId);
            if (this.type != null)
            recipientCreateRecipientRequest.type(RecipientCreateRecipientRequest.TypeEnum.fromValue(this.type));
            recipientCreateRecipientRequest.metadata(this.metadata);
            return recipientCreateRecipientRequest;
        }

        /**
         * Execute createRecipient request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            RecipientCreateRecipientRequest recipientCreateRecipientRequest = buildBodyParams();
            ApiResponse<String> localVarResp = createRecipientWithHttpInfo(recipientCreateRecipientRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createRecipient request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            RecipientCreateRecipientRequest recipientCreateRecipientRequest = buildBodyParams();
            return createRecipientWithHttpInfo(recipientCreateRecipientRequest);
        }

        /**
         * Execute createRecipient request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            RecipientCreateRecipientRequest recipientCreateRecipientRequest = buildBodyParams();
            return createRecipientAsync(recipientCreateRecipientRequest, _callback);
        }
    }

    /**
     * Create a Recipient
     * 
     * @return CreateRecipientRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public CreateRecipientRequestBuilder createRecipient(String name, String taxId, String type) throws IllegalArgumentException {
        if (name == null) throw new IllegalArgumentException("\"name\" is required but got null");
            

        if (taxId == null) throw new IllegalArgumentException("\"taxId\" is required but got null");
            

        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        return new CreateRecipientRequestBuilder(name, taxId, type);
    }
    private okhttp3.Call createWithdrawalCall(String recipientId, RecipientCreateWithdrawalRequest recipientCreateWithdrawalRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = recipientCreateWithdrawalRequest;

        // create path and map variables
        String localVarPath = "/recipients/{recipientId}/withdrawals"
            .replace("{" + "recipientId" + "}", localVarApiClient.escapeString(recipientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWithdrawalValidateBeforeCall(String recipientId, RecipientCreateWithdrawalRequest recipientCreateWithdrawalRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'recipientId' is set
        if (recipientId == null) {
            throw new ApiException("Missing the required parameter 'recipientId' when calling createWithdrawal(Async)");
        }

        return createWithdrawalCall(recipientId, recipientCreateWithdrawalRequest, _callback);

    }


    private ApiResponse<RecipientCreateWithdrawalResponse> createWithdrawalWithHttpInfo(String recipientId, RecipientCreateWithdrawalRequest recipientCreateWithdrawalRequest) throws ApiException {
        okhttp3.Call localVarCall = createWithdrawalValidateBeforeCall(recipientId, recipientCreateWithdrawalRequest, null);
        Type localVarReturnType = new TypeToken<RecipientCreateWithdrawalResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createWithdrawalAsync(String recipientId, RecipientCreateWithdrawalRequest recipientCreateWithdrawalRequest, final ApiCallback<RecipientCreateWithdrawalResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWithdrawalValidateBeforeCall(recipientId, recipientCreateWithdrawalRequest, _callback);
        Type localVarReturnType = new TypeToken<RecipientCreateWithdrawalResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateWithdrawalRequestBuilder {
        private final Integer amount;
        private final String method;
        private final String recipientId;
        private String code;
        private String pixKey;
        private RecipientCreateWithdrawalRequestBankAccount bankAccount;
        private String bankAccountId;
        private List<QrCodeGenerateQrCodeRequestMetadataInner> metadata;

        private CreateWithdrawalRequestBuilder(Integer amount, String method, String recipientId) {
            this.amount = amount;
            this.method = method;
            this.recipientId = recipientId;
        }

        /**
         * Set code
         * @param code Unique identifier for the object in your system. (optional)
         * @return CreateWithdrawalRequestBuilder
         */
        public CreateWithdrawalRequestBuilder code(String code) {
            this.code = code;
            return this;
        }
        
        /**
         * Set pixKey
         * @param pixKey The PIX key of the destination bank account. Required if method is PIX (optional)
         * @return CreateWithdrawalRequestBuilder
         */
        public CreateWithdrawalRequestBuilder pixKey(String pixKey) {
            this.pixKey = pixKey;
            return this;
        }
        
        /**
         * Set bankAccount
         * @param bankAccount  (optional)
         * @return CreateWithdrawalRequestBuilder
         */
        public CreateWithdrawalRequestBuilder bankAccount(RecipientCreateWithdrawalRequestBankAccount bankAccount) {
            this.bankAccount = bankAccount;
            return this;
        }
        
        /**
         * Set bankAccountId
         * @param bankAccountId The ID of the destination bank account. Required if method is STANDARD. (optional)
         * @return CreateWithdrawalRequestBuilder
         */
        public CreateWithdrawalRequestBuilder bankAccountId(String bankAccountId) {
            this.bankAccountId = bankAccountId;
            return this;
        }
        
        /**
         * Set metadata
         * @param metadata Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format. (optional)
         * @return CreateWithdrawalRequestBuilder
         */
        public CreateWithdrawalRequestBuilder metadata(List<QrCodeGenerateQrCodeRequestMetadataInner> metadata) {
            this.metadata = metadata;
            return this;
        }
        
        /**
         * Build call for createWithdrawal
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            RecipientCreateWithdrawalRequest recipientCreateWithdrawalRequest = buildBodyParams();
            return createWithdrawalCall(recipientId, recipientCreateWithdrawalRequest, _callback);
        }

        private RecipientCreateWithdrawalRequest buildBodyParams() {
            RecipientCreateWithdrawalRequest recipientCreateWithdrawalRequest = new RecipientCreateWithdrawalRequest();
            recipientCreateWithdrawalRequest.code(this.code);
            recipientCreateWithdrawalRequest.amount(this.amount);
            if (this.method != null)
            recipientCreateWithdrawalRequest.method(RecipientCreateWithdrawalRequest.MethodEnum.fromValue(this.method));
            recipientCreateWithdrawalRequest.pixKey(this.pixKey);
            recipientCreateWithdrawalRequest.bankAccount(this.bankAccount);
            recipientCreateWithdrawalRequest.bankAccountId(this.bankAccountId);
            recipientCreateWithdrawalRequest.metadata(this.metadata);
            return recipientCreateWithdrawalRequest;
        }

        /**
         * Execute createWithdrawal request
         * @return RecipientCreateWithdrawalResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public RecipientCreateWithdrawalResponse execute() throws ApiException {
            RecipientCreateWithdrawalRequest recipientCreateWithdrawalRequest = buildBodyParams();
            ApiResponse<RecipientCreateWithdrawalResponse> localVarResp = createWithdrawalWithHttpInfo(recipientId, recipientCreateWithdrawalRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createWithdrawal request with HTTP info returned
         * @return ApiResponse&lt;RecipientCreateWithdrawalResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RecipientCreateWithdrawalResponse> executeWithHttpInfo() throws ApiException {
            RecipientCreateWithdrawalRequest recipientCreateWithdrawalRequest = buildBodyParams();
            return createWithdrawalWithHttpInfo(recipientId, recipientCreateWithdrawalRequest);
        }

        /**
         * Execute createWithdrawal request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RecipientCreateWithdrawalResponse> _callback) throws ApiException {
            RecipientCreateWithdrawalRequest recipientCreateWithdrawalRequest = buildBodyParams();
            return createWithdrawalAsync(recipientId, recipientCreateWithdrawalRequest, _callback);
        }
    }

    /**
     * Create a Withdrawal
     * 
     * @param recipientId  (required)
     * @return CreateWithdrawalRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public CreateWithdrawalRequestBuilder createWithdrawal(Integer amount, String method, String recipientId) throws IllegalArgumentException {
        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
        if (method == null) throw new IllegalArgumentException("\"method\" is required but got null");
            

        if (recipientId == null) throw new IllegalArgumentException("\"recipientId\" is required but got null");
            

        return new CreateWithdrawalRequestBuilder(amount, method, recipientId);
    }
    private okhttp3.Call deleteBankAccountCall(String recipientId, String bankAccountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipients/{recipientId}/bank-accounts/{bankAccountId}"
            .replace("{" + "recipientId" + "}", localVarApiClient.escapeString(recipientId.toString()))
            .replace("{" + "bankAccountId" + "}", localVarApiClient.escapeString(bankAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteBankAccountValidateBeforeCall(String recipientId, String bankAccountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'recipientId' is set
        if (recipientId == null) {
            throw new ApiException("Missing the required parameter 'recipientId' when calling deleteBankAccount(Async)");
        }

        // verify the required parameter 'bankAccountId' is set
        if (bankAccountId == null) {
            throw new ApiException("Missing the required parameter 'bankAccountId' when calling deleteBankAccount(Async)");
        }

        return deleteBankAccountCall(recipientId, bankAccountId, _callback);

    }


    private ApiResponse<RecipientDeleteBankAccountResponse> deleteBankAccountWithHttpInfo(String recipientId, String bankAccountId) throws ApiException {
        okhttp3.Call localVarCall = deleteBankAccountValidateBeforeCall(recipientId, bankAccountId, null);
        Type localVarReturnType = new TypeToken<RecipientDeleteBankAccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteBankAccountAsync(String recipientId, String bankAccountId, final ApiCallback<RecipientDeleteBankAccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteBankAccountValidateBeforeCall(recipientId, bankAccountId, _callback);
        Type localVarReturnType = new TypeToken<RecipientDeleteBankAccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class DeleteBankAccountRequestBuilder {
        private final String recipientId;
        private final String bankAccountId;

        private DeleteBankAccountRequestBuilder(String recipientId, String bankAccountId) {
            this.recipientId = recipientId;
            this.bankAccountId = bankAccountId;
        }

        /**
         * Build call for deleteBankAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteBankAccountCall(recipientId, bankAccountId, _callback);
        }


        /**
         * Execute deleteBankAccount request
         * @return RecipientDeleteBankAccountResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public RecipientDeleteBankAccountResponse execute() throws ApiException {
            ApiResponse<RecipientDeleteBankAccountResponse> localVarResp = deleteBankAccountWithHttpInfo(recipientId, bankAccountId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute deleteBankAccount request with HTTP info returned
         * @return ApiResponse&lt;RecipientDeleteBankAccountResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RecipientDeleteBankAccountResponse> executeWithHttpInfo() throws ApiException {
            return deleteBankAccountWithHttpInfo(recipientId, bankAccountId);
        }

        /**
         * Execute deleteBankAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RecipientDeleteBankAccountResponse> _callback) throws ApiException {
            return deleteBankAccountAsync(recipientId, bankAccountId, _callback);
        }
    }

    /**
     * Delete a Bank Account
     * 
     * @param recipientId  (required)
     * @param bankAccountId  (required)
     * @return DeleteBankAccountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public DeleteBankAccountRequestBuilder deleteBankAccount(String recipientId, String bankAccountId) throws IllegalArgumentException {
        if (recipientId == null) throw new IllegalArgumentException("\"recipientId\" is required but got null");
            

        if (bankAccountId == null) throw new IllegalArgumentException("\"bankAccountId\" is required but got null");
            

        return new DeleteBankAccountRequestBuilder(recipientId, bankAccountId);
    }
    private okhttp3.Call getBalanceCall(String recipientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipients/{recipientId}/balance"
            .replace("{" + "recipientId" + "}", localVarApiClient.escapeString(recipientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBalanceValidateBeforeCall(String recipientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'recipientId' is set
        if (recipientId == null) {
            throw new ApiException("Missing the required parameter 'recipientId' when calling getBalance(Async)");
        }

        return getBalanceCall(recipientId, _callback);

    }


    private ApiResponse<Object> getBalanceWithHttpInfo(String recipientId) throws ApiException {
        okhttp3.Call localVarCall = getBalanceValidateBeforeCall(recipientId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBalanceAsync(String recipientId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBalanceValidateBeforeCall(recipientId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBalanceRequestBuilder {
        private final String recipientId;

        private GetBalanceRequestBuilder(String recipientId) {
            this.recipientId = recipientId;
        }

        /**
         * Build call for getBalance
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBalanceCall(recipientId, _callback);
        }


        /**
         * Execute getBalance request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = getBalanceWithHttpInfo(recipientId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBalance request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return getBalanceWithHttpInfo(recipientId);
        }

        /**
         * Execute getBalance request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return getBalanceAsync(recipientId, _callback);
        }
    }

    /**
     * Get Balance
     * 
     * @param recipientId  (required)
     * @return GetBalanceRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetBalanceRequestBuilder getBalance(String recipientId) throws IllegalArgumentException {
        if (recipientId == null) throw new IllegalArgumentException("\"recipientId\" is required but got null");
            

        return new GetBalanceRequestBuilder(recipientId);
    }
    private okhttp3.Call getBankAccountCall(String recipientId, String bankAccountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipients/{recipientId}/bank-accounts/{bankAccountId}"
            .replace("{" + "recipientId" + "}", localVarApiClient.escapeString(recipientId.toString()))
            .replace("{" + "bankAccountId" + "}", localVarApiClient.escapeString(bankAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBankAccountValidateBeforeCall(String recipientId, String bankAccountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'recipientId' is set
        if (recipientId == null) {
            throw new ApiException("Missing the required parameter 'recipientId' when calling getBankAccount(Async)");
        }

        // verify the required parameter 'bankAccountId' is set
        if (bankAccountId == null) {
            throw new ApiException("Missing the required parameter 'bankAccountId' when calling getBankAccount(Async)");
        }

        return getBankAccountCall(recipientId, bankAccountId, _callback);

    }


    private ApiResponse<RecipientGetBankAccountResponse> getBankAccountWithHttpInfo(String recipientId, String bankAccountId) throws ApiException {
        okhttp3.Call localVarCall = getBankAccountValidateBeforeCall(recipientId, bankAccountId, null);
        Type localVarReturnType = new TypeToken<RecipientGetBankAccountResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getBankAccountAsync(String recipientId, String bankAccountId, final ApiCallback<RecipientGetBankAccountResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBankAccountValidateBeforeCall(recipientId, bankAccountId, _callback);
        Type localVarReturnType = new TypeToken<RecipientGetBankAccountResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetBankAccountRequestBuilder {
        private final String recipientId;
        private final String bankAccountId;

        private GetBankAccountRequestBuilder(String recipientId, String bankAccountId) {
            this.recipientId = recipientId;
            this.bankAccountId = bankAccountId;
        }

        /**
         * Build call for getBankAccount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getBankAccountCall(recipientId, bankAccountId, _callback);
        }


        /**
         * Execute getBankAccount request
         * @return RecipientGetBankAccountResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public RecipientGetBankAccountResponse execute() throws ApiException {
            ApiResponse<RecipientGetBankAccountResponse> localVarResp = getBankAccountWithHttpInfo(recipientId, bankAccountId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getBankAccount request with HTTP info returned
         * @return ApiResponse&lt;RecipientGetBankAccountResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RecipientGetBankAccountResponse> executeWithHttpInfo() throws ApiException {
            return getBankAccountWithHttpInfo(recipientId, bankAccountId);
        }

        /**
         * Execute getBankAccount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RecipientGetBankAccountResponse> _callback) throws ApiException {
            return getBankAccountAsync(recipientId, bankAccountId, _callback);
        }
    }

    /**
     * Retrieve a Bank Account
     * 
     * @param recipientId  (required)
     * @param bankAccountId  (required)
     * @return GetBankAccountRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetBankAccountRequestBuilder getBankAccount(String recipientId, String bankAccountId) throws IllegalArgumentException {
        if (recipientId == null) throw new IllegalArgumentException("\"recipientId\" is required but got null");
            

        if (bankAccountId == null) throw new IllegalArgumentException("\"bankAccountId\" is required but got null");
            

        return new GetBankAccountRequestBuilder(recipientId, bankAccountId);
    }
    private okhttp3.Call getByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipients/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getById(Async)");
        }

        return getByIdCall(id, _callback);

    }


    private ApiResponse<String> getByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String id, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String id;

        private GetByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(id, _callback);
        }


        /**
         * Execute getById request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(id);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getByIdAsync(id, _callback);
        }
    }

    /**
     * Retrieve a Recipient
     * 
     * @param id  (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetByIdRequestBuilder(id);
    }
    private okhttp3.Call getWithdrawalByIdCall(String recipientId, String withdrawalId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipients/{recipientId}/withdrawals/{withdrawalId}"
            .replace("{" + "recipientId" + "}", localVarApiClient.escapeString(recipientId.toString()))
            .replace("{" + "withdrawalId" + "}", localVarApiClient.escapeString(withdrawalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWithdrawalByIdValidateBeforeCall(String recipientId, String withdrawalId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'recipientId' is set
        if (recipientId == null) {
            throw new ApiException("Missing the required parameter 'recipientId' when calling getWithdrawalById(Async)");
        }

        // verify the required parameter 'withdrawalId' is set
        if (withdrawalId == null) {
            throw new ApiException("Missing the required parameter 'withdrawalId' when calling getWithdrawalById(Async)");
        }

        return getWithdrawalByIdCall(recipientId, withdrawalId, _callback);

    }


    private ApiResponse<RecipientGetWithdrawalByIdResponse> getWithdrawalByIdWithHttpInfo(String recipientId, String withdrawalId) throws ApiException {
        okhttp3.Call localVarCall = getWithdrawalByIdValidateBeforeCall(recipientId, withdrawalId, null);
        Type localVarReturnType = new TypeToken<RecipientGetWithdrawalByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWithdrawalByIdAsync(String recipientId, String withdrawalId, final ApiCallback<RecipientGetWithdrawalByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWithdrawalByIdValidateBeforeCall(recipientId, withdrawalId, _callback);
        Type localVarReturnType = new TypeToken<RecipientGetWithdrawalByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWithdrawalByIdRequestBuilder {
        private final String recipientId;
        private final String withdrawalId;

        private GetWithdrawalByIdRequestBuilder(String recipientId, String withdrawalId) {
            this.recipientId = recipientId;
            this.withdrawalId = withdrawalId;
        }

        /**
         * Build call for getWithdrawalById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWithdrawalByIdCall(recipientId, withdrawalId, _callback);
        }


        /**
         * Execute getWithdrawalById request
         * @return RecipientGetWithdrawalByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public RecipientGetWithdrawalByIdResponse execute() throws ApiException {
            ApiResponse<RecipientGetWithdrawalByIdResponse> localVarResp = getWithdrawalByIdWithHttpInfo(recipientId, withdrawalId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWithdrawalById request with HTTP info returned
         * @return ApiResponse&lt;RecipientGetWithdrawalByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RecipientGetWithdrawalByIdResponse> executeWithHttpInfo() throws ApiException {
            return getWithdrawalByIdWithHttpInfo(recipientId, withdrawalId);
        }

        /**
         * Execute getWithdrawalById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RecipientGetWithdrawalByIdResponse> _callback) throws ApiException {
            return getWithdrawalByIdAsync(recipientId, withdrawalId, _callback);
        }
    }

    /**
     * Retrieve a Withdrawal
     * 
     * @param recipientId  (required)
     * @param withdrawalId  (required)
     * @return GetWithdrawalByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public GetWithdrawalByIdRequestBuilder getWithdrawalById(String recipientId, String withdrawalId) throws IllegalArgumentException {
        if (recipientId == null) throw new IllegalArgumentException("\"recipientId\" is required but got null");
            

        if (withdrawalId == null) throw new IllegalArgumentException("\"withdrawalId\" is required but got null");
            

        return new GetWithdrawalByIdRequestBuilder(recipientId, withdrawalId);
    }
    private okhttp3.Call listAllCall(Integer limit, String before, String after, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipients";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAllValidateBeforeCall(Integer limit, String before, String after, final ApiCallback _callback) throws ApiException {
        return listAllCall(limit, before, after, _callback);

    }


    private ApiResponse<RecipientListAllResponse> listAllWithHttpInfo(Integer limit, String before, String after) throws ApiException {
        okhttp3.Call localVarCall = listAllValidateBeforeCall(limit, before, after, null);
        Type localVarReturnType = new TypeToken<RecipientListAllResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listAllAsync(Integer limit, String before, String after, final ApiCallback<RecipientListAllResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAllValidateBeforeCall(limit, before, after, _callback);
        Type localVarReturnType = new TypeToken<RecipientListAllResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListAllRequestBuilder {
        private Integer limit;
        private String before;
        private String after;

        private ListAllRequestBuilder() {
        }

        /**
         * Set limit
         * @param limit A limit on the number of objects to be returned, between 1 and 50. (optional, default to 10)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set before
         * @param before A cursor for use in pagination. &#x60;&#x60;&#x60;before&#x60;&#x60;&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 50 objects, starting with &#x60;&#x60;&#x60;obj_bar&#x60;&#x60;&#x60;, your subsequent call can include &#x60;&#x60;&#x60;before&#x3D;obj_bar&#x60;&#x60;&#x60; in order to fetch the previous page of the list. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder before(String before) {
            this.before = before;
            return this;
        }
        
        /**
         * Set after
         * @param after A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 50 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. (optional)
         * @return ListAllRequestBuilder
         */
        public ListAllRequestBuilder after(String after) {
            this.after = after;
            return this;
        }
        
        /**
         * Build call for listAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listAllCall(limit, before, after, _callback);
        }


        /**
         * Execute listAll request
         * @return RecipientListAllResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public RecipientListAllResponse execute() throws ApiException {
            ApiResponse<RecipientListAllResponse> localVarResp = listAllWithHttpInfo(limit, before, after);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listAll request with HTTP info returned
         * @return ApiResponse&lt;RecipientListAllResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RecipientListAllResponse> executeWithHttpInfo() throws ApiException {
            return listAllWithHttpInfo(limit, before, after);
        }

        /**
         * Execute listAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RecipientListAllResponse> _callback) throws ApiException {
            return listAllAsync(limit, before, after, _callback);
        }
    }

    /**
     * List all Recipients
     * 
     * @return ListAllRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ListAllRequestBuilder listAll() throws IllegalArgumentException {
        return new ListAllRequestBuilder();
    }
    private okhttp3.Call listBankAccountsCall(String recipientId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipients/{recipientId}/bank-accounts"
            .replace("{" + "recipientId" + "}", localVarApiClient.escapeString(recipientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listBankAccountsValidateBeforeCall(String recipientId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'recipientId' is set
        if (recipientId == null) {
            throw new ApiException("Missing the required parameter 'recipientId' when calling listBankAccounts(Async)");
        }

        return listBankAccountsCall(recipientId, _callback);

    }


    private ApiResponse<RecipientListBankAccountsResponse> listBankAccountsWithHttpInfo(String recipientId) throws ApiException {
        okhttp3.Call localVarCall = listBankAccountsValidateBeforeCall(recipientId, null);
        Type localVarReturnType = new TypeToken<RecipientListBankAccountsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listBankAccountsAsync(String recipientId, final ApiCallback<RecipientListBankAccountsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listBankAccountsValidateBeforeCall(recipientId, _callback);
        Type localVarReturnType = new TypeToken<RecipientListBankAccountsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListBankAccountsRequestBuilder {
        private final String recipientId;

        private ListBankAccountsRequestBuilder(String recipientId) {
            this.recipientId = recipientId;
        }

        /**
         * Build call for listBankAccounts
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listBankAccountsCall(recipientId, _callback);
        }


        /**
         * Execute listBankAccounts request
         * @return RecipientListBankAccountsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public RecipientListBankAccountsResponse execute() throws ApiException {
            ApiResponse<RecipientListBankAccountsResponse> localVarResp = listBankAccountsWithHttpInfo(recipientId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listBankAccounts request with HTTP info returned
         * @return ApiResponse&lt;RecipientListBankAccountsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RecipientListBankAccountsResponse> executeWithHttpInfo() throws ApiException {
            return listBankAccountsWithHttpInfo(recipientId);
        }

        /**
         * Execute listBankAccounts request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RecipientListBankAccountsResponse> _callback) throws ApiException {
            return listBankAccountsAsync(recipientId, _callback);
        }
    }

    /**
     * List all Bank Accounts
     * 
     * @param recipientId  (required)
     * @return ListBankAccountsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ListBankAccountsRequestBuilder listBankAccounts(String recipientId) throws IllegalArgumentException {
        if (recipientId == null) throw new IllegalArgumentException("\"recipientId\" is required but got null");
            

        return new ListBankAccountsRequestBuilder(recipientId);
    }
    private okhttp3.Call listTransactionsCall(String recipientId, String limit, String before, String after, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipients/{recipientId}/transactions"
            .replace("{" + "recipientId" + "}", localVarApiClient.escapeString(recipientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTransactionsValidateBeforeCall(String recipientId, String limit, String before, String after, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'recipientId' is set
        if (recipientId == null) {
            throw new ApiException("Missing the required parameter 'recipientId' when calling listTransactions(Async)");
        }

        return listTransactionsCall(recipientId, limit, before, after, _callback);

    }


    private ApiResponse<Object> listTransactionsWithHttpInfo(String recipientId, String limit, String before, String after) throws ApiException {
        okhttp3.Call localVarCall = listTransactionsValidateBeforeCall(recipientId, limit, before, after, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listTransactionsAsync(String recipientId, String limit, String before, String after, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTransactionsValidateBeforeCall(recipientId, limit, before, after, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListTransactionsRequestBuilder {
        private final String recipientId;
        private String limit;
        private String before;
        private String after;

        private ListTransactionsRequestBuilder(String recipientId) {
            this.recipientId = recipientId;
        }

        /**
         * Set limit
         * @param limit A limit on the number of objects to be returned, between 1 and 50. (optional, default to 10)
         * @return ListTransactionsRequestBuilder
         */
        public ListTransactionsRequestBuilder limit(String limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set before
         * @param before A cursor for use in pagination. &#x60;&#x60;&#x60;before&#x60;&#x60;&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 50 objects, starting with &#x60;&#x60;&#x60;obj_bar&#x60;&#x60;&#x60;, your subsequent call can include &#x60;&#x60;&#x60;before&#x3D;obj_bar&#x60;&#x60;&#x60; in order to fetch the previous page of the list. (optional)
         * @return ListTransactionsRequestBuilder
         */
        public ListTransactionsRequestBuilder before(String before) {
            this.before = before;
            return this;
        }
        
        /**
         * Set after
         * @param after A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 50 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. (optional)
         * @return ListTransactionsRequestBuilder
         */
        public ListTransactionsRequestBuilder after(String after) {
            this.after = after;
            return this;
        }
        
        /**
         * Build call for listTransactions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listTransactionsCall(recipientId, limit, before, after, _callback);
        }


        /**
         * Execute listTransactions request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            ApiResponse<Object> localVarResp = listTransactionsWithHttpInfo(recipientId, limit, before, after);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listTransactions request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            return listTransactionsWithHttpInfo(recipientId, limit, before, after);
        }

        /**
         * Execute listTransactions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            return listTransactionsAsync(recipientId, limit, before, after, _callback);
        }
    }

    /**
     * List all Transactions
     * 
     * @param recipientId  (required)
     * @return ListTransactionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ListTransactionsRequestBuilder listTransactions(String recipientId) throws IllegalArgumentException {
        if (recipientId == null) throw new IllegalArgumentException("\"recipientId\" is required but got null");
            

        return new ListTransactionsRequestBuilder(recipientId);
    }
    private okhttp3.Call listWithdrawalsCall(String recipientId, String limit, String before, String after, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipients/{recipientId}/withdrawals"
            .replace("{" + "recipientId" + "}", localVarApiClient.escapeString(recipientId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (after != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("after", after));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listWithdrawalsValidateBeforeCall(String recipientId, String limit, String before, String after, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'recipientId' is set
        if (recipientId == null) {
            throw new ApiException("Missing the required parameter 'recipientId' when calling listWithdrawals(Async)");
        }

        return listWithdrawalsCall(recipientId, limit, before, after, _callback);

    }


    private ApiResponse<RecipientListWithdrawalsResponse> listWithdrawalsWithHttpInfo(String recipientId, String limit, String before, String after) throws ApiException {
        okhttp3.Call localVarCall = listWithdrawalsValidateBeforeCall(recipientId, limit, before, after, null);
        Type localVarReturnType = new TypeToken<RecipientListWithdrawalsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listWithdrawalsAsync(String recipientId, String limit, String before, String after, final ApiCallback<RecipientListWithdrawalsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listWithdrawalsValidateBeforeCall(recipientId, limit, before, after, _callback);
        Type localVarReturnType = new TypeToken<RecipientListWithdrawalsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListWithdrawalsRequestBuilder {
        private final String recipientId;
        private String limit;
        private String before;
        private String after;

        private ListWithdrawalsRequestBuilder(String recipientId) {
            this.recipientId = recipientId;
        }

        /**
         * Set limit
         * @param limit A limit on the number of objects to be returned, between 1 and 50. (optional, default to 10)
         * @return ListWithdrawalsRequestBuilder
         */
        public ListWithdrawalsRequestBuilder limit(String limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set before
         * @param before A cursor for use in pagination. &#x60;&#x60;&#x60;before&#x60;&#x60;&#x60; is an object ID that defines your place in the list. For instance, if you make a list request and receive 50 objects, starting with &#x60;&#x60;&#x60;obj_bar&#x60;&#x60;&#x60;, your subsequent call can include &#x60;&#x60;&#x60;before&#x3D;obj_bar&#x60;&#x60;&#x60; in order to fetch the previous page of the list. (optional)
         * @return ListWithdrawalsRequestBuilder
         */
        public ListWithdrawalsRequestBuilder before(String before) {
            this.before = before;
            return this;
        }
        
        /**
         * Set after
         * @param after A cursor for use in pagination. after is an object ID that defines your place in the list. For instance, if you make a list request and receive 50 objects, ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch the next page of the list. (optional)
         * @return ListWithdrawalsRequestBuilder
         */
        public ListWithdrawalsRequestBuilder after(String after) {
            this.after = after;
            return this;
        }
        
        /**
         * Build call for listWithdrawals
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listWithdrawalsCall(recipientId, limit, before, after, _callback);
        }


        /**
         * Execute listWithdrawals request
         * @return RecipientListWithdrawalsResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public RecipientListWithdrawalsResponse execute() throws ApiException {
            ApiResponse<RecipientListWithdrawalsResponse> localVarResp = listWithdrawalsWithHttpInfo(recipientId, limit, before, after);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listWithdrawals request with HTTP info returned
         * @return ApiResponse&lt;RecipientListWithdrawalsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RecipientListWithdrawalsResponse> executeWithHttpInfo() throws ApiException {
            return listWithdrawalsWithHttpInfo(recipientId, limit, before, after);
        }

        /**
         * Execute listWithdrawals request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RecipientListWithdrawalsResponse> _callback) throws ApiException {
            return listWithdrawalsAsync(recipientId, limit, before, after, _callback);
        }
    }

    /**
     * List all Withdrawals
     * 
     * @param recipientId  (required)
     * @return ListWithdrawalsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public ListWithdrawalsRequestBuilder listWithdrawals(String recipientId) throws IllegalArgumentException {
        if (recipientId == null) throw new IllegalArgumentException("\"recipientId\" is required but got null");
            

        return new ListWithdrawalsRequestBuilder(recipientId);
    }
    private okhttp3.Call updateRecipientByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/recipients/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "sec0" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRecipientByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateRecipientById(Async)");
        }

        return updateRecipientByIdCall(id, _callback);

    }


    private ApiResponse<String> updateRecipientByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = updateRecipientByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateRecipientByIdAsync(String id, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRecipientByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateRecipientByIdRequestBuilder {
        private final String id;

        private UpdateRecipientByIdRequestBuilder(String id) {
            this.id = id;
        }

        /**
         * Build call for updateRecipientById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateRecipientByIdCall(id, _callback);
        }


        /**
         * Execute updateRecipientById request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = updateRecipientByIdWithHttpInfo(id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateRecipientById request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return updateRecipientByIdWithHttpInfo(id);
        }

        /**
         * Execute updateRecipientById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return updateRecipientByIdAsync(id, _callback);
        }
    }

    /**
     * Update a Recipient
     * 
     * @param id  (required)
     * @return UpdateRecipientByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200 </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRecipientByIdRequestBuilder updateRecipientById(String id) throws IllegalArgumentException {
        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new UpdateRecipientByIdRequestBuilder(id);
    }
}
