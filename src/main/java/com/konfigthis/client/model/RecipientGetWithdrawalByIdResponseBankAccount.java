/*
 * Developer API
 * At Sqala, we believe that everyone deserves access to financial services, and we are committed to providing secure and reliable payment solutions to clients who may have been overlooked by traditional financial institutions.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * RecipientGetWithdrawalByIdResponseBankAccount
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class RecipientGetWithdrawalByIdResponseBankAccount {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_HOLDER_NAME = "holderName";
  @SerializedName(SERIALIZED_NAME_HOLDER_NAME)
  private String holderName;

  public static final String SERIALIZED_NAME_HOLDER_TAX_ID = "holderTaxId";
  @SerializedName(SERIALIZED_NAME_HOLDER_TAX_ID)
  private String holderTaxId;

  public static final String SERIALIZED_NAME_HOLDER_TYPE = "holderType";
  @SerializedName(SERIALIZED_NAME_HOLDER_TYPE)
  private String holderType;

  public static final String SERIALIZED_NAME_BRANCH_NUMBER = "branchNumber";
  @SerializedName(SERIALIZED_NAME_BRANCH_NUMBER)
  private String branchNumber;

  public static final String SERIALIZED_NAME_ACCOUNT_NUMBER = "accountNumber";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_NUMBER)
  private String accountNumber;

  public static final String SERIALIZED_NAME_BANK_ID = "bankId";
  @SerializedName(SERIALIZED_NAME_BANK_ID)
  private String bankId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private Object updatedAt = null;

  public static final String SERIALIZED_NAME_DELETED_AT = "deletedAt";
  @SerializedName(SERIALIZED_NAME_DELETED_AT)
  private Object deletedAt = null;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata = null;

  public RecipientGetWithdrawalByIdResponseBankAccount() {
  }

  public RecipientGetWithdrawalByIdResponseBankAccount id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "a8a9c988-c2ba-44b9-af2d-ee6fcc00e269", value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public RecipientGetWithdrawalByIdResponseBankAccount code(String code) {
    
    
    
    
    this.code = code;
    return this;
  }

   /**
   * Get code
   * @return code
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ade39877-cb26-42bc-b151-8e6eef84284d", value = "")

  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    
    
    
    this.code = code;
  }


  public RecipientGetWithdrawalByIdResponseBankAccount holderName(String holderName) {
    
    
    
    
    this.holderName = holderName;
    return this;
  }

   /**
   * Get holderName
   * @return holderName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Bruce Wayne", value = "")

  public String getHolderName() {
    return holderName;
  }


  public void setHolderName(String holderName) {
    
    
    
    this.holderName = holderName;
  }


  public RecipientGetWithdrawalByIdResponseBankAccount holderTaxId(String holderTaxId) {
    
    
    
    
    this.holderTaxId = holderTaxId;
    return this;
  }

   /**
   * Get holderTaxId
   * @return holderTaxId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "37515868066", value = "")

  public String getHolderTaxId() {
    return holderTaxId;
  }


  public void setHolderTaxId(String holderTaxId) {
    
    
    
    this.holderTaxId = holderTaxId;
  }


  public RecipientGetWithdrawalByIdResponseBankAccount holderType(String holderType) {
    
    
    
    
    this.holderType = holderType;
    return this;
  }

   /**
   * Get holderType
   * @return holderType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "INDIVIDUAL", value = "")

  public String getHolderType() {
    return holderType;
  }


  public void setHolderType(String holderType) {
    
    
    
    this.holderType = holderType;
  }


  public RecipientGetWithdrawalByIdResponseBankAccount branchNumber(String branchNumber) {
    
    
    
    
    this.branchNumber = branchNumber;
    return this;
  }

   /**
   * Get branchNumber
   * @return branchNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0001", value = "")

  public String getBranchNumber() {
    return branchNumber;
  }


  public void setBranchNumber(String branchNumber) {
    
    
    
    this.branchNumber = branchNumber;
  }


  public RecipientGetWithdrawalByIdResponseBankAccount accountNumber(String accountNumber) {
    
    
    
    
    this.accountNumber = accountNumber;
    return this;
  }

   /**
   * Get accountNumber
   * @return accountNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "11111-1", value = "")

  public String getAccountNumber() {
    return accountNumber;
  }


  public void setAccountNumber(String accountNumber) {
    
    
    
    this.accountNumber = accountNumber;
  }


  public RecipientGetWithdrawalByIdResponseBankAccount bankId(String bankId) {
    
    
    
    
    this.bankId = bankId;
    return this;
  }

   /**
   * Get bankId
   * @return bankId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "60701190", value = "")

  public String getBankId() {
    return bankId;
  }


  public void setBankId(String bankId) {
    
    
    
    this.bankId = bankId;
  }


  public RecipientGetWithdrawalByIdResponseBankAccount status(String status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ACTIVE", value = "")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    
    
    
    this.status = status;
  }


  public RecipientGetWithdrawalByIdResponseBankAccount createdAt(String createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-06-06T11:48:21Z", value = "")

  public String getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(String createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public RecipientGetWithdrawalByIdResponseBankAccount updatedAt(Object updatedAt) {
    
    
    
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(Object updatedAt) {
    
    
    
    this.updatedAt = updatedAt;
  }


  public RecipientGetWithdrawalByIdResponseBankAccount deletedAt(Object deletedAt) {
    
    
    
    
    this.deletedAt = deletedAt;
    return this;
  }

   /**
   * Get deletedAt
   * @return deletedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getDeletedAt() {
    return deletedAt;
  }


  public void setDeletedAt(Object deletedAt) {
    
    
    
    this.deletedAt = deletedAt;
  }


  public RecipientGetWithdrawalByIdResponseBankAccount metadata(Object metadata) {
    
    
    
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getMetadata() {
    return metadata;
  }


  public void setMetadata(Object metadata) {
    
    
    
    this.metadata = metadata;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the RecipientGetWithdrawalByIdResponseBankAccount instance itself
   */
  public RecipientGetWithdrawalByIdResponseBankAccount putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecipientGetWithdrawalByIdResponseBankAccount recipientGetWithdrawalByIdResponseBankAccount = (RecipientGetWithdrawalByIdResponseBankAccount) o;
    return Objects.equals(this.id, recipientGetWithdrawalByIdResponseBankAccount.id) &&
        Objects.equals(this.code, recipientGetWithdrawalByIdResponseBankAccount.code) &&
        Objects.equals(this.holderName, recipientGetWithdrawalByIdResponseBankAccount.holderName) &&
        Objects.equals(this.holderTaxId, recipientGetWithdrawalByIdResponseBankAccount.holderTaxId) &&
        Objects.equals(this.holderType, recipientGetWithdrawalByIdResponseBankAccount.holderType) &&
        Objects.equals(this.branchNumber, recipientGetWithdrawalByIdResponseBankAccount.branchNumber) &&
        Objects.equals(this.accountNumber, recipientGetWithdrawalByIdResponseBankAccount.accountNumber) &&
        Objects.equals(this.bankId, recipientGetWithdrawalByIdResponseBankAccount.bankId) &&
        Objects.equals(this.status, recipientGetWithdrawalByIdResponseBankAccount.status) &&
        Objects.equals(this.createdAt, recipientGetWithdrawalByIdResponseBankAccount.createdAt) &&
        Objects.equals(this.updatedAt, recipientGetWithdrawalByIdResponseBankAccount.updatedAt) &&
        Objects.equals(this.deletedAt, recipientGetWithdrawalByIdResponseBankAccount.deletedAt) &&
        Objects.equals(this.metadata, recipientGetWithdrawalByIdResponseBankAccount.metadata)&&
        Objects.equals(this.additionalProperties, recipientGetWithdrawalByIdResponseBankAccount.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, code, holderName, holderTaxId, holderType, branchNumber, accountNumber, bankId, status, createdAt, updatedAt, deletedAt, metadata, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecipientGetWithdrawalByIdResponseBankAccount {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    holderName: ").append(toIndentedString(holderName)).append("\n");
    sb.append("    holderTaxId: ").append(toIndentedString(holderTaxId)).append("\n");
    sb.append("    holderType: ").append(toIndentedString(holderType)).append("\n");
    sb.append("    branchNumber: ").append(toIndentedString(branchNumber)).append("\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    bankId: ").append(toIndentedString(bankId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    deletedAt: ").append(toIndentedString(deletedAt)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("code");
    openapiFields.add("holderName");
    openapiFields.add("holderTaxId");
    openapiFields.add("holderType");
    openapiFields.add("branchNumber");
    openapiFields.add("accountNumber");
    openapiFields.add("bankId");
    openapiFields.add("status");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");
    openapiFields.add("deletedAt");
    openapiFields.add("metadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RecipientGetWithdrawalByIdResponseBankAccount
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RecipientGetWithdrawalByIdResponseBankAccount.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecipientGetWithdrawalByIdResponseBankAccount is not found in the empty JSON string", RecipientGetWithdrawalByIdResponseBankAccount.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("holderName") != null && !jsonObj.get("holderName").isJsonNull()) && !jsonObj.get("holderName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `holderName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("holderName").toString()));
      }
      if ((jsonObj.get("holderTaxId") != null && !jsonObj.get("holderTaxId").isJsonNull()) && !jsonObj.get("holderTaxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `holderTaxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("holderTaxId").toString()));
      }
      if ((jsonObj.get("holderType") != null && !jsonObj.get("holderType").isJsonNull()) && !jsonObj.get("holderType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `holderType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("holderType").toString()));
      }
      if ((jsonObj.get("branchNumber") != null && !jsonObj.get("branchNumber").isJsonNull()) && !jsonObj.get("branchNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `branchNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("branchNumber").toString()));
      }
      if ((jsonObj.get("accountNumber") != null && !jsonObj.get("accountNumber").isJsonNull()) && !jsonObj.get("accountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountNumber").toString()));
      }
      if ((jsonObj.get("bankId") != null && !jsonObj.get("bankId").isJsonNull()) && !jsonObj.get("bankId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankId").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("createdAt") != null && !jsonObj.get("createdAt").isJsonNull()) && !jsonObj.get("createdAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdAt").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecipientGetWithdrawalByIdResponseBankAccount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecipientGetWithdrawalByIdResponseBankAccount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecipientGetWithdrawalByIdResponseBankAccount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecipientGetWithdrawalByIdResponseBankAccount.class));

       return (TypeAdapter<T>) new TypeAdapter<RecipientGetWithdrawalByIdResponseBankAccount>() {
           @Override
           public void write(JsonWriter out, RecipientGetWithdrawalByIdResponseBankAccount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public RecipientGetWithdrawalByIdResponseBankAccount read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             RecipientGetWithdrawalByIdResponseBankAccount instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RecipientGetWithdrawalByIdResponseBankAccount given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RecipientGetWithdrawalByIdResponseBankAccount
  * @throws IOException if the JSON string is invalid with respect to RecipientGetWithdrawalByIdResponseBankAccount
  */
  public static RecipientGetWithdrawalByIdResponseBankAccount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecipientGetWithdrawalByIdResponseBankAccount.class);
  }

 /**
  * Convert an instance of RecipientGetWithdrawalByIdResponseBankAccount to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

