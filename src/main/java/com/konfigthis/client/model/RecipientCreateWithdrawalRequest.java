/*
 * Developer API
 * At Sqala, we believe that everyone deserves access to financial services, and we are committed to providing secure and reliable payment solutions to clients who may have been overlooked by traditional financial institutions.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.QrCodeGenerateQrCodeRequestMetadataInner;
import com.konfigthis.client.model.RecipientCreateWithdrawalRequestBankAccount;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * RecipientCreateWithdrawalRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class RecipientCreateWithdrawalRequest {
  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount;

  /**
   * The method of the withdrawal.
   */
  @JsonAdapter(MethodEnum.Adapter.class)
 public enum MethodEnum {
    STANDARD("STANDARD"),
    
    PIX("PIX");

    private String value;

    MethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MethodEnum fromValue(String value) {
      for (MethodEnum b : MethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MethodEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private MethodEnum method;

  public static final String SERIALIZED_NAME_PIX_KEY = "pixKey";
  @SerializedName(SERIALIZED_NAME_PIX_KEY)
  private String pixKey;

  public static final String SERIALIZED_NAME_BANK_ACCOUNT = "bankAccount";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT)
  private RecipientCreateWithdrawalRequestBankAccount bankAccount;

  public static final String SERIALIZED_NAME_BANK_ACCOUNT_ID = "bankAccountId";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT_ID)
  private String bankAccountId;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private List<QrCodeGenerateQrCodeRequestMetadataInner> metadata = null;

  public RecipientCreateWithdrawalRequest() {
  }

  public RecipientCreateWithdrawalRequest code(String code) {
    
    
    
    
    this.code = code;
    return this;
  }

   /**
   * Unique identifier for the object in your system.
   * @return code
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier for the object in your system.")

  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    
    
    
    this.code = code;
  }


  public RecipientCreateWithdrawalRequest amount(Integer amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

   /**
   * Amount in cents to be transferred.
   * @return amount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Amount in cents to be transferred.")

  public Integer getAmount() {
    return amount;
  }


  public void setAmount(Integer amount) {
    
    
    
    this.amount = amount;
  }


  public RecipientCreateWithdrawalRequest method(MethodEnum method) {
    
    
    
    
    this.method = method;
    return this;
  }

   /**
   * The method of the withdrawal.
   * @return method
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The method of the withdrawal.")

  public MethodEnum getMethod() {
    return method;
  }


  public void setMethod(MethodEnum method) {
    
    
    
    this.method = method;
  }


  public RecipientCreateWithdrawalRequest pixKey(String pixKey) {
    
    
    
    
    this.pixKey = pixKey;
    return this;
  }

   /**
   * The PIX key of the destination bank account. Required if method is PIX
   * @return pixKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The PIX key of the destination bank account. Required if method is PIX")

  public String getPixKey() {
    return pixKey;
  }


  public void setPixKey(String pixKey) {
    
    
    
    this.pixKey = pixKey;
  }


  public RecipientCreateWithdrawalRequest bankAccount(RecipientCreateWithdrawalRequestBankAccount bankAccount) {
    
    
    
    
    this.bankAccount = bankAccount;
    return this;
  }

   /**
   * Get bankAccount
   * @return bankAccount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public RecipientCreateWithdrawalRequestBankAccount getBankAccount() {
    return bankAccount;
  }


  public void setBankAccount(RecipientCreateWithdrawalRequestBankAccount bankAccount) {
    
    
    
    this.bankAccount = bankAccount;
  }


  public RecipientCreateWithdrawalRequest bankAccountId(String bankAccountId) {
    
    
    
    
    this.bankAccountId = bankAccountId;
    return this;
  }

   /**
   * The ID of the destination bank account. Required if method is STANDARD.
   * @return bankAccountId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The ID of the destination bank account. Required if method is STANDARD.")

  public String getBankAccountId() {
    return bankAccountId;
  }


  public void setBankAccountId(String bankAccountId) {
    
    
    
    this.bankAccountId = bankAccountId;
  }


  public RecipientCreateWithdrawalRequest metadata(List<QrCodeGenerateQrCodeRequestMetadataInner> metadata) {
    
    
    
    
    this.metadata = metadata;
    return this;
  }

  public RecipientCreateWithdrawalRequest addMetadataItem(QrCodeGenerateQrCodeRequestMetadataInner metadataItem) {
    if (this.metadata == null) {
      this.metadata = new ArrayList<>();
    }
    this.metadata.add(metadataItem);
    return this;
  }

   /**
   * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.")

  public List<QrCodeGenerateQrCodeRequestMetadataInner> getMetadata() {
    return metadata;
  }


  public void setMetadata(List<QrCodeGenerateQrCodeRequestMetadataInner> metadata) {
    
    
    
    this.metadata = metadata;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the RecipientCreateWithdrawalRequest instance itself
   */
  public RecipientCreateWithdrawalRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecipientCreateWithdrawalRequest recipientCreateWithdrawalRequest = (RecipientCreateWithdrawalRequest) o;
    return Objects.equals(this.code, recipientCreateWithdrawalRequest.code) &&
        Objects.equals(this.amount, recipientCreateWithdrawalRequest.amount) &&
        Objects.equals(this.method, recipientCreateWithdrawalRequest.method) &&
        Objects.equals(this.pixKey, recipientCreateWithdrawalRequest.pixKey) &&
        Objects.equals(this.bankAccount, recipientCreateWithdrawalRequest.bankAccount) &&
        Objects.equals(this.bankAccountId, recipientCreateWithdrawalRequest.bankAccountId) &&
        Objects.equals(this.metadata, recipientCreateWithdrawalRequest.metadata)&&
        Objects.equals(this.additionalProperties, recipientCreateWithdrawalRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, amount, method, pixKey, bankAccount, bankAccountId, metadata, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecipientCreateWithdrawalRequest {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    pixKey: ").append(toIndentedString(pixKey)).append("\n");
    sb.append("    bankAccount: ").append(toIndentedString(bankAccount)).append("\n");
    sb.append("    bankAccountId: ").append(toIndentedString(bankAccountId)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("amount");
    openapiFields.add("method");
    openapiFields.add("pixKey");
    openapiFields.add("bankAccount");
    openapiFields.add("bankAccountId");
    openapiFields.add("metadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amount");
    openapiRequiredFields.add("method");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RecipientCreateWithdrawalRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RecipientCreateWithdrawalRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecipientCreateWithdrawalRequest is not found in the empty JSON string", RecipientCreateWithdrawalRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RecipientCreateWithdrawalRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if (!jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      if ((jsonObj.get("pixKey") != null && !jsonObj.get("pixKey").isJsonNull()) && !jsonObj.get("pixKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pixKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pixKey").toString()));
      }
      // validate the optional field `bankAccount`
      if (jsonObj.get("bankAccount") != null && !jsonObj.get("bankAccount").isJsonNull()) {
        RecipientCreateWithdrawalRequestBankAccount.validateJsonObject(jsonObj.getAsJsonObject("bankAccount"));
      }
      if ((jsonObj.get("bankAccountId") != null && !jsonObj.get("bankAccountId").isJsonNull()) && !jsonObj.get("bankAccountId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankAccountId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankAccountId").toString()));
      }
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        JsonArray jsonArraymetadata = jsonObj.getAsJsonArray("metadata");
        if (jsonArraymetadata != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metadata").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metadata` to be an array in the JSON string but got `%s`", jsonObj.get("metadata").toString()));
          }

          // validate the optional field `metadata` (array)
          for (int i = 0; i < jsonArraymetadata.size(); i++) {
            QrCodeGenerateQrCodeRequestMetadataInner.validateJsonObject(jsonArraymetadata.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecipientCreateWithdrawalRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecipientCreateWithdrawalRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecipientCreateWithdrawalRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecipientCreateWithdrawalRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<RecipientCreateWithdrawalRequest>() {
           @Override
           public void write(JsonWriter out, RecipientCreateWithdrawalRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public RecipientCreateWithdrawalRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             RecipientCreateWithdrawalRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RecipientCreateWithdrawalRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RecipientCreateWithdrawalRequest
  * @throws IOException if the JSON string is invalid with respect to RecipientCreateWithdrawalRequest
  */
  public static RecipientCreateWithdrawalRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecipientCreateWithdrawalRequest.class);
  }

 /**
  * Convert an instance of RecipientCreateWithdrawalRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

