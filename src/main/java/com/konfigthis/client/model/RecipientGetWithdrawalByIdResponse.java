/*
 * Developer API
 * At Sqala, we believe that everyone deserves access to financial services, and we are committed to providing secure and reliable payment solutions to clients who may have been overlooked by traditional financial institutions.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.RecipientGetWithdrawalByIdResponseBankAccount;
import com.konfigthis.client.model.RecipientGetWithdrawalByIdResponseMetadata;
import com.konfigthis.client.model.RecipientGetWithdrawalByIdResponseRecipient;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * RecipientGetWithdrawalByIdResponse
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class RecipientGetWithdrawalByIdResponse {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount = 0;

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private String method;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_APPROVED_AT = "approvedAt";
  @SerializedName(SERIALIZED_NAME_APPROVED_AT)
  private String approvedAt;

  public static final String SERIALIZED_NAME_REJECTED_AT = "rejectedAt";
  @SerializedName(SERIALIZED_NAME_REJECTED_AT)
  private Object rejectedAt = null;

  public static final String SERIALIZED_NAME_PAID_AT = "paidAt";
  @SerializedName(SERIALIZED_NAME_PAID_AT)
  private String paidAt;

  public static final String SERIALIZED_NAME_FAILED_AT = "failedAt";
  @SerializedName(SERIALIZED_NAME_FAILED_AT)
  private Object failedAt = null;

  public static final String SERIALIZED_NAME_PIX_KEY = "pixKey";
  @SerializedName(SERIALIZED_NAME_PIX_KEY)
  private Object pixKey = null;

  public static final String SERIALIZED_NAME_BANK_ACCOUNT = "bankAccount";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT)
  private RecipientGetWithdrawalByIdResponseBankAccount bankAccount;

  public static final String SERIALIZED_NAME_RECIPIENT = "recipient";
  @SerializedName(SERIALIZED_NAME_RECIPIENT)
  private RecipientGetWithdrawalByIdResponseRecipient recipient;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private RecipientGetWithdrawalByIdResponseMetadata metadata;

  public RecipientGetWithdrawalByIdResponse() {
  }

  public RecipientGetWithdrawalByIdResponse id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "86cfd98a-dcc5-4b67-b8d7-841e4a9f37fd", value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public RecipientGetWithdrawalByIdResponse code(String code) {
    
    
    
    
    this.code = code;
    return this;
  }

   /**
   * Get code
   * @return code
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "45447b68-09fc-4af9-be82-d7b4df00fc3b", value = "")

  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    
    
    
    this.code = code;
  }


  public RecipientGetWithdrawalByIdResponse amount(Integer amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "990", value = "")

  public Integer getAmount() {
    return amount;
  }


  public void setAmount(Integer amount) {
    
    
    
    this.amount = amount;
  }


  public RecipientGetWithdrawalByIdResponse method(String method) {
    
    
    
    
    this.method = method;
    return this;
  }

   /**
   * Get method
   * @return method
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "PIX", value = "")

  public String getMethod() {
    return method;
  }


  public void setMethod(String method) {
    
    
    
    this.method = method;
  }


  public RecipientGetWithdrawalByIdResponse status(String status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "PAID", value = "")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    
    
    
    this.status = status;
  }


  public RecipientGetWithdrawalByIdResponse createdAt(String createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-06-06T11:48:21Z", value = "")

  public String getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(String createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public RecipientGetWithdrawalByIdResponse approvedAt(String approvedAt) {
    
    
    
    
    this.approvedAt = approvedAt;
    return this;
  }

   /**
   * Get approvedAt
   * @return approvedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-06-06T11:48:21Z", value = "")

  public String getApprovedAt() {
    return approvedAt;
  }


  public void setApprovedAt(String approvedAt) {
    
    
    
    this.approvedAt = approvedAt;
  }


  public RecipientGetWithdrawalByIdResponse rejectedAt(Object rejectedAt) {
    
    
    
    
    this.rejectedAt = rejectedAt;
    return this;
  }

   /**
   * Get rejectedAt
   * @return rejectedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getRejectedAt() {
    return rejectedAt;
  }


  public void setRejectedAt(Object rejectedAt) {
    
    
    
    this.rejectedAt = rejectedAt;
  }


  public RecipientGetWithdrawalByIdResponse paidAt(String paidAt) {
    
    
    
    
    this.paidAt = paidAt;
    return this;
  }

   /**
   * Get paidAt
   * @return paidAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-06-06T11:48:21Z", value = "")

  public String getPaidAt() {
    return paidAt;
  }


  public void setPaidAt(String paidAt) {
    
    
    
    this.paidAt = paidAt;
  }


  public RecipientGetWithdrawalByIdResponse failedAt(Object failedAt) {
    
    
    
    
    this.failedAt = failedAt;
    return this;
  }

   /**
   * Get failedAt
   * @return failedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getFailedAt() {
    return failedAt;
  }


  public void setFailedAt(Object failedAt) {
    
    
    
    this.failedAt = failedAt;
  }


  public RecipientGetWithdrawalByIdResponse pixKey(Object pixKey) {
    
    
    
    
    this.pixKey = pixKey;
    return this;
  }

   /**
   * Get pixKey
   * @return pixKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getPixKey() {
    return pixKey;
  }


  public void setPixKey(Object pixKey) {
    
    
    
    this.pixKey = pixKey;
  }


  public RecipientGetWithdrawalByIdResponse bankAccount(RecipientGetWithdrawalByIdResponseBankAccount bankAccount) {
    
    
    
    
    this.bankAccount = bankAccount;
    return this;
  }

   /**
   * Get bankAccount
   * @return bankAccount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public RecipientGetWithdrawalByIdResponseBankAccount getBankAccount() {
    return bankAccount;
  }


  public void setBankAccount(RecipientGetWithdrawalByIdResponseBankAccount bankAccount) {
    
    
    
    this.bankAccount = bankAccount;
  }


  public RecipientGetWithdrawalByIdResponse recipient(RecipientGetWithdrawalByIdResponseRecipient recipient) {
    
    
    
    
    this.recipient = recipient;
    return this;
  }

   /**
   * Get recipient
   * @return recipient
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public RecipientGetWithdrawalByIdResponseRecipient getRecipient() {
    return recipient;
  }


  public void setRecipient(RecipientGetWithdrawalByIdResponseRecipient recipient) {
    
    
    
    this.recipient = recipient;
  }


  public RecipientGetWithdrawalByIdResponse metadata(RecipientGetWithdrawalByIdResponseMetadata metadata) {
    
    
    
    
    this.metadata = metadata;
    return this;
  }

   /**
   * Get metadata
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public RecipientGetWithdrawalByIdResponseMetadata getMetadata() {
    return metadata;
  }


  public void setMetadata(RecipientGetWithdrawalByIdResponseMetadata metadata) {
    
    
    
    this.metadata = metadata;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the RecipientGetWithdrawalByIdResponse instance itself
   */
  public RecipientGetWithdrawalByIdResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecipientGetWithdrawalByIdResponse recipientGetWithdrawalByIdResponse = (RecipientGetWithdrawalByIdResponse) o;
    return Objects.equals(this.id, recipientGetWithdrawalByIdResponse.id) &&
        Objects.equals(this.code, recipientGetWithdrawalByIdResponse.code) &&
        Objects.equals(this.amount, recipientGetWithdrawalByIdResponse.amount) &&
        Objects.equals(this.method, recipientGetWithdrawalByIdResponse.method) &&
        Objects.equals(this.status, recipientGetWithdrawalByIdResponse.status) &&
        Objects.equals(this.createdAt, recipientGetWithdrawalByIdResponse.createdAt) &&
        Objects.equals(this.approvedAt, recipientGetWithdrawalByIdResponse.approvedAt) &&
        Objects.equals(this.rejectedAt, recipientGetWithdrawalByIdResponse.rejectedAt) &&
        Objects.equals(this.paidAt, recipientGetWithdrawalByIdResponse.paidAt) &&
        Objects.equals(this.failedAt, recipientGetWithdrawalByIdResponse.failedAt) &&
        Objects.equals(this.pixKey, recipientGetWithdrawalByIdResponse.pixKey) &&
        Objects.equals(this.bankAccount, recipientGetWithdrawalByIdResponse.bankAccount) &&
        Objects.equals(this.recipient, recipientGetWithdrawalByIdResponse.recipient) &&
        Objects.equals(this.metadata, recipientGetWithdrawalByIdResponse.metadata)&&
        Objects.equals(this.additionalProperties, recipientGetWithdrawalByIdResponse.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, code, amount, method, status, createdAt, approvedAt, rejectedAt, paidAt, failedAt, pixKey, bankAccount, recipient, metadata, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecipientGetWithdrawalByIdResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    approvedAt: ").append(toIndentedString(approvedAt)).append("\n");
    sb.append("    rejectedAt: ").append(toIndentedString(rejectedAt)).append("\n");
    sb.append("    paidAt: ").append(toIndentedString(paidAt)).append("\n");
    sb.append("    failedAt: ").append(toIndentedString(failedAt)).append("\n");
    sb.append("    pixKey: ").append(toIndentedString(pixKey)).append("\n");
    sb.append("    bankAccount: ").append(toIndentedString(bankAccount)).append("\n");
    sb.append("    recipient: ").append(toIndentedString(recipient)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("code");
    openapiFields.add("amount");
    openapiFields.add("method");
    openapiFields.add("status");
    openapiFields.add("createdAt");
    openapiFields.add("approvedAt");
    openapiFields.add("rejectedAt");
    openapiFields.add("paidAt");
    openapiFields.add("failedAt");
    openapiFields.add("pixKey");
    openapiFields.add("bankAccount");
    openapiFields.add("recipient");
    openapiFields.add("metadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to RecipientGetWithdrawalByIdResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!RecipientGetWithdrawalByIdResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecipientGetWithdrawalByIdResponse is not found in the empty JSON string", RecipientGetWithdrawalByIdResponse.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) && !jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("createdAt") != null && !jsonObj.get("createdAt").isJsonNull()) && !jsonObj.get("createdAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdAt").toString()));
      }
      if ((jsonObj.get("approvedAt") != null && !jsonObj.get("approvedAt").isJsonNull()) && !jsonObj.get("approvedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `approvedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("approvedAt").toString()));
      }
      if ((jsonObj.get("paidAt") != null && !jsonObj.get("paidAt").isJsonNull()) && !jsonObj.get("paidAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paidAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paidAt").toString()));
      }
      // validate the optional field `bankAccount`
      if (jsonObj.get("bankAccount") != null && !jsonObj.get("bankAccount").isJsonNull()) {
        RecipientGetWithdrawalByIdResponseBankAccount.validateJsonObject(jsonObj.getAsJsonObject("bankAccount"));
      }
      // validate the optional field `recipient`
      if (jsonObj.get("recipient") != null && !jsonObj.get("recipient").isJsonNull()) {
        RecipientGetWithdrawalByIdResponseRecipient.validateJsonObject(jsonObj.getAsJsonObject("recipient"));
      }
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        RecipientGetWithdrawalByIdResponseMetadata.validateJsonObject(jsonObj.getAsJsonObject("metadata"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecipientGetWithdrawalByIdResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecipientGetWithdrawalByIdResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecipientGetWithdrawalByIdResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecipientGetWithdrawalByIdResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<RecipientGetWithdrawalByIdResponse>() {
           @Override
           public void write(JsonWriter out, RecipientGetWithdrawalByIdResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public RecipientGetWithdrawalByIdResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             RecipientGetWithdrawalByIdResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RecipientGetWithdrawalByIdResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RecipientGetWithdrawalByIdResponse
  * @throws IOException if the JSON string is invalid with respect to RecipientGetWithdrawalByIdResponse
  */
  public static RecipientGetWithdrawalByIdResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecipientGetWithdrawalByIdResponse.class);
  }

 /**
  * Convert an instance of RecipientGetWithdrawalByIdResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

