/*
 * Developer API
 * At Sqala, we believe that everyone deserves access to financial services, and we are committed to providing secure and reliable payment solutions to clients who may have been overlooked by traditional financial institutions.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.QrCodeGenerateQrCodeRequestMetadataInner;
import com.konfigthis.client.model.QrCodeGenerateQrCodeRequestPayer;
import com.konfigthis.client.model.QrCodeGenerateQrCodeRequestSplitInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * QrCodeGenerateQrCodeRequest
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class QrCodeGenerateQrCodeRequest {
  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount;

  public static final String SERIALIZED_NAME_PAYER = "payer";
  @SerializedName(SERIALIZED_NAME_PAYER)
  private QrCodeGenerateQrCodeRequestPayer payer;

  public static final String SERIALIZED_NAME_SPLIT = "split";
  @SerializedName(SERIALIZED_NAME_SPLIT)
  private List<QrCodeGenerateQrCodeRequestSplitInner> split = null;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private List<QrCodeGenerateQrCodeRequestMetadataInner> metadata = null;

  public QrCodeGenerateQrCodeRequest() {
  }

  public QrCodeGenerateQrCodeRequest code(String code) {
    
    
    
    
    this.code = code;
    return this;
  }

   /**
   * Unique identifier for the object in your system.
   * @return code
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Unique identifier for the object in your system.")

  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    
    
    
    this.code = code;
  }


  public QrCodeGenerateQrCodeRequest amount(Integer amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

   /**
   * Amount in cents to be paid.
   * @return amount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Amount in cents to be paid.")

  public Integer getAmount() {
    return amount;
  }


  public void setAmount(Integer amount) {
    
    
    
    this.amount = amount;
  }


  public QrCodeGenerateQrCodeRequest payer(QrCodeGenerateQrCodeRequestPayer payer) {
    
    
    
    
    this.payer = payer;
    return this;
  }

   /**
   * Get payer
   * @return payer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public QrCodeGenerateQrCodeRequestPayer getPayer() {
    return payer;
  }


  public void setPayer(QrCodeGenerateQrCodeRequestPayer payer) {
    
    
    
    this.payer = payer;
  }


  public QrCodeGenerateQrCodeRequest split(List<QrCodeGenerateQrCodeRequestSplitInner> split) {
    
    
    
    
    this.split = split;
    return this;
  }

  public QrCodeGenerateQrCodeRequest addSplitItem(QrCodeGenerateQrCodeRequestSplitInner splitItem) {
    if (this.split == null) {
      this.split = new ArrayList<>();
    }
    this.split.add(splitItem);
    return this;
  }

   /**
   * This object represents a list of recipients who will receive part of the payment.
   * @return split
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This object represents a list of recipients who will receive part of the payment.")

  public List<QrCodeGenerateQrCodeRequestSplitInner> getSplit() {
    return split;
  }


  public void setSplit(List<QrCodeGenerateQrCodeRequestSplitInner> split) {
    
    
    
    this.split = split;
  }


  public QrCodeGenerateQrCodeRequest metadata(List<QrCodeGenerateQrCodeRequestMetadataInner> metadata) {
    
    
    
    
    this.metadata = metadata;
    return this;
  }

  public QrCodeGenerateQrCodeRequest addMetadataItem(QrCodeGenerateQrCodeRequestMetadataInner metadataItem) {
    if (this.metadata == null) {
      this.metadata = new ArrayList<>();
    }
    this.metadata.add(metadataItem);
    return this;
  }

   /**
   * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   * @return metadata
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.")

  public List<QrCodeGenerateQrCodeRequestMetadataInner> getMetadata() {
    return metadata;
  }


  public void setMetadata(List<QrCodeGenerateQrCodeRequestMetadataInner> metadata) {
    
    
    
    this.metadata = metadata;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the QrCodeGenerateQrCodeRequest instance itself
   */
  public QrCodeGenerateQrCodeRequest putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QrCodeGenerateQrCodeRequest qrCodeGenerateQrCodeRequest = (QrCodeGenerateQrCodeRequest) o;
    return Objects.equals(this.code, qrCodeGenerateQrCodeRequest.code) &&
        Objects.equals(this.amount, qrCodeGenerateQrCodeRequest.amount) &&
        Objects.equals(this.payer, qrCodeGenerateQrCodeRequest.payer) &&
        Objects.equals(this.split, qrCodeGenerateQrCodeRequest.split) &&
        Objects.equals(this.metadata, qrCodeGenerateQrCodeRequest.metadata)&&
        Objects.equals(this.additionalProperties, qrCodeGenerateQrCodeRequest.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, amount, payer, split, metadata, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QrCodeGenerateQrCodeRequest {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    payer: ").append(toIndentedString(payer)).append("\n");
    sb.append("    split: ").append(toIndentedString(split)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("amount");
    openapiFields.add("payer");
    openapiFields.add("split");
    openapiFields.add("metadata");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amount");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to QrCodeGenerateQrCodeRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!QrCodeGenerateQrCodeRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QrCodeGenerateQrCodeRequest is not found in the empty JSON string", QrCodeGenerateQrCodeRequest.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : QrCodeGenerateQrCodeRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      // validate the optional field `payer`
      if (jsonObj.get("payer") != null && !jsonObj.get("payer").isJsonNull()) {
        QrCodeGenerateQrCodeRequestPayer.validateJsonObject(jsonObj.getAsJsonObject("payer"));
      }
      if (jsonObj.get("split") != null && !jsonObj.get("split").isJsonNull()) {
        JsonArray jsonArraysplit = jsonObj.getAsJsonArray("split");
        if (jsonArraysplit != null) {
          // ensure the json data is an array
          if (!jsonObj.get("split").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `split` to be an array in the JSON string but got `%s`", jsonObj.get("split").toString()));
          }

          // validate the optional field `split` (array)
          for (int i = 0; i < jsonArraysplit.size(); i++) {
            QrCodeGenerateQrCodeRequestSplitInner.validateJsonObject(jsonArraysplit.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        JsonArray jsonArraymetadata = jsonObj.getAsJsonArray("metadata");
        if (jsonArraymetadata != null) {
          // ensure the json data is an array
          if (!jsonObj.get("metadata").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `metadata` to be an array in the JSON string but got `%s`", jsonObj.get("metadata").toString()));
          }

          // validate the optional field `metadata` (array)
          for (int i = 0; i < jsonArraymetadata.size(); i++) {
            QrCodeGenerateQrCodeRequestMetadataInner.validateJsonObject(jsonArraymetadata.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QrCodeGenerateQrCodeRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QrCodeGenerateQrCodeRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QrCodeGenerateQrCodeRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QrCodeGenerateQrCodeRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<QrCodeGenerateQrCodeRequest>() {
           @Override
           public void write(JsonWriter out, QrCodeGenerateQrCodeRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public QrCodeGenerateQrCodeRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             QrCodeGenerateQrCodeRequest instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of QrCodeGenerateQrCodeRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of QrCodeGenerateQrCodeRequest
  * @throws IOException if the JSON string is invalid with respect to QrCodeGenerateQrCodeRequest
  */
  public static QrCodeGenerateQrCodeRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QrCodeGenerateQrCodeRequest.class);
  }

 /**
  * Convert an instance of QrCodeGenerateQrCodeRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

