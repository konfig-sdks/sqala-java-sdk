/*
 * Developer API
 * At Sqala, we believe that everyone deserves access to financial services, and we are committed to providing secure and reliable payment solutions to clients who may have been overlooked by traditional financial institutions.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.WebhookResendAttemptResponseDataDestination;
import com.konfigthis.client.model.WebhookResendAttemptResponseDataPayer;
import com.konfigthis.client.model.WebhookResendAttemptResponseDataSource;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * WebhookResendAttemptResponseData
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class WebhookResendAttemptResponseData {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transactionId";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Integer amount = 0;

  public static final String SERIALIZED_NAME_PAID_AMOUNT = "paidAmount";
  @SerializedName(SERIALIZED_NAME_PAID_AMOUNT)
  private Integer paidAmount = 0;

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private String method;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_PROCESSED_AT = "processedAt";
  @SerializedName(SERIALIZED_NAME_PROCESSED_AT)
  private String processedAt;

  public static final String SERIALIZED_NAME_PAID_AT = "paidAt";
  @SerializedName(SERIALIZED_NAME_PAID_AT)
  private String paidAt;

  public static final String SERIALIZED_NAME_FAILED_AT = "failedAt";
  @SerializedName(SERIALIZED_NAME_FAILED_AT)
  private Object failedAt = null;

  public static final String SERIALIZED_NAME_SPLIT = "split";
  @SerializedName(SERIALIZED_NAME_SPLIT)
  private List<Object> split = null;

  public static final String SERIALIZED_NAME_PAYER = "payer";
  @SerializedName(SERIALIZED_NAME_PAYER)
  private WebhookResendAttemptResponseDataPayer payer;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private WebhookResendAttemptResponseDataSource source;

  public static final String SERIALIZED_NAME_DESTINATION = "destination";
  @SerializedName(SERIALIZED_NAME_DESTINATION)
  private WebhookResendAttemptResponseDataDestination destination;

  public WebhookResendAttemptResponseData() {
  }

  public WebhookResendAttemptResponseData id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "96f42ef0-00b1-11ed-bb3a-098b2c4afa72", value = "")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public WebhookResendAttemptResponseData code(String code) {
    
    
    
    
    this.code = code;
    return this;
  }

   /**
   * Get code
   * @return code
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ffa16dae-ac66-4830-8984-171f306ca8d7", value = "")

  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    
    
    
    this.code = code;
  }


  public WebhookResendAttemptResponseData transactionId(String transactionId) {
    
    
    
    
    this.transactionId = transactionId;
    return this;
  }

   /**
   * Get transactionId
   * @return transactionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "E00416968202207061808Ymqobao0YFb", value = "")

  public String getTransactionId() {
    return transactionId;
  }


  public void setTransactionId(String transactionId) {
    
    
    
    this.transactionId = transactionId;
  }


  public WebhookResendAttemptResponseData amount(Integer amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1990", value = "")

  public Integer getAmount() {
    return amount;
  }


  public void setAmount(Integer amount) {
    
    
    
    this.amount = amount;
  }


  public WebhookResendAttemptResponseData paidAmount(Integer paidAmount) {
    
    
    
    
    this.paidAmount = paidAmount;
    return this;
  }

   /**
   * Get paidAmount
   * @return paidAmount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "1990", value = "")

  public Integer getPaidAmount() {
    return paidAmount;
  }


  public void setPaidAmount(Integer paidAmount) {
    
    
    
    this.paidAmount = paidAmount;
  }


  public WebhookResendAttemptResponseData method(String method) {
    
    
    
    
    this.method = method;
    return this;
  }

   /**
   * Get method
   * @return method
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "BANK_TRANSFER", value = "")

  public String getMethod() {
    return method;
  }


  public void setMethod(String method) {
    
    
    
    this.method = method;
  }


  public WebhookResendAttemptResponseData status(String status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "PAID", value = "")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    
    
    
    this.status = status;
  }


  public WebhookResendAttemptResponseData createdAt(String createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-07-11T00:37:06.009Z", value = "")

  public String getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(String createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public WebhookResendAttemptResponseData processedAt(String processedAt) {
    
    
    
    
    this.processedAt = processedAt;
    return this;
  }

   /**
   * Get processedAt
   * @return processedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-07-11T00:37:06.116Z", value = "")

  public String getProcessedAt() {
    return processedAt;
  }


  public void setProcessedAt(String processedAt) {
    
    
    
    this.processedAt = processedAt;
  }


  public WebhookResendAttemptResponseData paidAt(String paidAt) {
    
    
    
    
    this.paidAt = paidAt;
    return this;
  }

   /**
   * Get paidAt
   * @return paidAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2022-07-06T00:00:00.000Z", value = "")

  public String getPaidAt() {
    return paidAt;
  }


  public void setPaidAt(String paidAt) {
    
    
    
    this.paidAt = paidAt;
  }


  public WebhookResendAttemptResponseData failedAt(Object failedAt) {
    
    
    
    
    this.failedAt = failedAt;
    return this;
  }

   /**
   * Get failedAt
   * @return failedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getFailedAt() {
    return failedAt;
  }


  public void setFailedAt(Object failedAt) {
    
    
    
    this.failedAt = failedAt;
  }


  public WebhookResendAttemptResponseData split(List<Object> split) {
    
    
    
    
    this.split = split;
    return this;
  }

  public WebhookResendAttemptResponseData addSplitItem(Object splitItem) {
    if (this.split == null) {
      this.split = new ArrayList<>();
    }
    this.split.add(splitItem);
    return this;
  }

   /**
   * Get split
   * @return split
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Object> getSplit() {
    return split;
  }


  public void setSplit(List<Object> split) {
    
    
    
    this.split = split;
  }


  public WebhookResendAttemptResponseData payer(WebhookResendAttemptResponseDataPayer payer) {
    
    
    
    
    this.payer = payer;
    return this;
  }

   /**
   * Get payer
   * @return payer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public WebhookResendAttemptResponseDataPayer getPayer() {
    return payer;
  }


  public void setPayer(WebhookResendAttemptResponseDataPayer payer) {
    
    
    
    this.payer = payer;
  }


  public WebhookResendAttemptResponseData source(WebhookResendAttemptResponseDataSource source) {
    
    
    
    
    this.source = source;
    return this;
  }

   /**
   * Get source
   * @return source
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public WebhookResendAttemptResponseDataSource getSource() {
    return source;
  }


  public void setSource(WebhookResendAttemptResponseDataSource source) {
    
    
    
    this.source = source;
  }


  public WebhookResendAttemptResponseData destination(WebhookResendAttemptResponseDataDestination destination) {
    
    
    
    
    this.destination = destination;
    return this;
  }

   /**
   * Get destination
   * @return destination
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public WebhookResendAttemptResponseDataDestination getDestination() {
    return destination;
  }


  public void setDestination(WebhookResendAttemptResponseDataDestination destination) {
    
    
    
    this.destination = destination;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the WebhookResendAttemptResponseData instance itself
   */
  public WebhookResendAttemptResponseData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookResendAttemptResponseData webhookResendAttemptResponseData = (WebhookResendAttemptResponseData) o;
    return Objects.equals(this.id, webhookResendAttemptResponseData.id) &&
        Objects.equals(this.code, webhookResendAttemptResponseData.code) &&
        Objects.equals(this.transactionId, webhookResendAttemptResponseData.transactionId) &&
        Objects.equals(this.amount, webhookResendAttemptResponseData.amount) &&
        Objects.equals(this.paidAmount, webhookResendAttemptResponseData.paidAmount) &&
        Objects.equals(this.method, webhookResendAttemptResponseData.method) &&
        Objects.equals(this.status, webhookResendAttemptResponseData.status) &&
        Objects.equals(this.createdAt, webhookResendAttemptResponseData.createdAt) &&
        Objects.equals(this.processedAt, webhookResendAttemptResponseData.processedAt) &&
        Objects.equals(this.paidAt, webhookResendAttemptResponseData.paidAt) &&
        Objects.equals(this.failedAt, webhookResendAttemptResponseData.failedAt) &&
        Objects.equals(this.split, webhookResendAttemptResponseData.split) &&
        Objects.equals(this.payer, webhookResendAttemptResponseData.payer) &&
        Objects.equals(this.source, webhookResendAttemptResponseData.source) &&
        Objects.equals(this.destination, webhookResendAttemptResponseData.destination)&&
        Objects.equals(this.additionalProperties, webhookResendAttemptResponseData.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, code, transactionId, amount, paidAmount, method, status, createdAt, processedAt, paidAt, failedAt, split, payer, source, destination, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookResendAttemptResponseData {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    paidAmount: ").append(toIndentedString(paidAmount)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    processedAt: ").append(toIndentedString(processedAt)).append("\n");
    sb.append("    paidAt: ").append(toIndentedString(paidAt)).append("\n");
    sb.append("    failedAt: ").append(toIndentedString(failedAt)).append("\n");
    sb.append("    split: ").append(toIndentedString(split)).append("\n");
    sb.append("    payer: ").append(toIndentedString(payer)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("code");
    openapiFields.add("transactionId");
    openapiFields.add("amount");
    openapiFields.add("paidAmount");
    openapiFields.add("method");
    openapiFields.add("status");
    openapiFields.add("createdAt");
    openapiFields.add("processedAt");
    openapiFields.add("paidAt");
    openapiFields.add("failedAt");
    openapiFields.add("split");
    openapiFields.add("payer");
    openapiFields.add("source");
    openapiFields.add("destination");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WebhookResendAttemptResponseData
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!WebhookResendAttemptResponseData.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookResendAttemptResponseData is not found in the empty JSON string", WebhookResendAttemptResponseData.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("transactionId") != null && !jsonObj.get("transactionId").isJsonNull()) && !jsonObj.get("transactionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionId").toString()));
      }
      if ((jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) && !jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("createdAt") != null && !jsonObj.get("createdAt").isJsonNull()) && !jsonObj.get("createdAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdAt").toString()));
      }
      if ((jsonObj.get("processedAt") != null && !jsonObj.get("processedAt").isJsonNull()) && !jsonObj.get("processedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processedAt").toString()));
      }
      if ((jsonObj.get("paidAt") != null && !jsonObj.get("paidAt").isJsonNull()) && !jsonObj.get("paidAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paidAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paidAt").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("split") != null && !jsonObj.get("split").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `split` to be an array in the JSON string but got `%s`", jsonObj.get("split").toString()));
      }
      // validate the optional field `payer`
      if (jsonObj.get("payer") != null && !jsonObj.get("payer").isJsonNull()) {
        WebhookResendAttemptResponseDataPayer.validateJsonObject(jsonObj.getAsJsonObject("payer"));
      }
      // validate the optional field `source`
      if (jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) {
        WebhookResendAttemptResponseDataSource.validateJsonObject(jsonObj.getAsJsonObject("source"));
      }
      // validate the optional field `destination`
      if (jsonObj.get("destination") != null && !jsonObj.get("destination").isJsonNull()) {
        WebhookResendAttemptResponseDataDestination.validateJsonObject(jsonObj.getAsJsonObject("destination"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookResendAttemptResponseData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookResendAttemptResponseData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookResendAttemptResponseData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookResendAttemptResponseData.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookResendAttemptResponseData>() {
           @Override
           public void write(JsonWriter out, WebhookResendAttemptResponseData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookResendAttemptResponseData read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             WebhookResendAttemptResponseData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WebhookResendAttemptResponseData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WebhookResendAttemptResponseData
  * @throws IOException if the JSON string is invalid with respect to WebhookResendAttemptResponseData
  */
  public static WebhookResendAttemptResponseData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookResendAttemptResponseData.class);
  }

 /**
  * Convert an instance of WebhookResendAttemptResponseData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

